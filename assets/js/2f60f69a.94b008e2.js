"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6677],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=u(n),d=s,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[m]="string"==typeof e?e:s,i[1]=r;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5798:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>u});var a=n(7462),s=(n(7294),n(3905));const o={toc_min_heading_level:2,toc_max_heading_level:5},i="Continuous Testing",r={unversionedId:"guides/software-lifecycle/continuous-testing/README",id:"guides/software-lifecycle/continuous-testing/README",title:"Continuous Testing",description:"A comprehensive guide to developing a continuous testing plan, implementation, and automation approach for your project using AI tools.",source:"@site/docs/guides/software-lifecycle/continuous-testing/README.md",sourceDirName:"guides/software-lifecycle/continuous-testing",slug:"/guides/software-lifecycle/continuous-testing/",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/",draft:!1,editUrl:"https://github.com/nasa-ammos/slim/tree/main/docs/guides/software-lifecycle/continuous-testing/README.md",tags:[],version:"current",frontMatter:{toc_min_heading_level:2,toc_max_heading_level:5},sidebar:"guidesSidebar",previous:{title:"CI Reference Architectures",permalink:"/slim/docs/guides/software-lifecycle/continuous-integration/reference-architecture"},next:{title:"TESTING.md (Example)",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/TESTING-example"}},l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Background",id:"background",level:3},{value:"Approach",id:"approach",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Create a TESTING.md",id:"1-create-a-testingmd",level:3},{value:"1.1 Types of Testing",id:"11-types-of-testing",level:4},{value:"1.2 Unit Testing",id:"12-unit-testing",level:4},{value:"1.3 System Tests",id:"13-system-tests",level:4},{value:"Integration Tests",id:"integration-tests",level:5},{value:"Security Tests",id:"security-tests",level:5},{value:"Performance Tests",id:"performance-tests",level:5},{value:"User Interface (UI) Tests",id:"user-interface-ui-tests",level:5},{value:"2. Write Your Tests",id:"2-write-your-tests",level:3},{value:"2.1 Recommended Test Types",id:"21-recommended-test-types",level:4},{value:"2.2 Robot Framework and LLM Synergy",id:"22-robot-framework-and-llm-synergy",level:4},{value:"2.2.1 Example - Robot Framework and LLM Synergy",id:"221-example---robot-framework-and-llm-synergy",level:5},{value:"3. Automate Your Tests",id:"3-automate-your-tests",level:3},{value:"3.1 Unit Test Automation",id:"31-unit-test-automation",level:4},{value:"Developers&#39; Machines",id:"developers-machines",level:5},{value:"Version Control System",id:"version-control-system",level:5},{value:"GitHub Actions",id:"github-actions",level:6},{value:"Jenkins",id:"jenkins",level:6},{value:"3.2 System Test Automation",id:"32-system-test-automation",level:4},{value:"Types of System Tests",id:"types-of-system-tests",level:5},{value:"Integration Tests Automation",id:"integration-tests-automation",level:5},{value:"Security Tests Automation",id:"security-tests-automation",level:5},{value:"Performance Tests Automation",id:"performance-tests-automation",level:5},{value:"User Interface Tests Automation",id:"user-interface-tests-automation",level:5},{value:"4. Maintain Your Tests",id:"4-maintain-your-tests",level:3},{value:"Frequently Asked Questions (FAQ)",id:"frequently-asked-questions-faq",level:2},{value:"Credits",id:"credits",level:2},{value:"Feedback and Contributions",id:"feedback-and-contributions",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"continuous-testing"},"Continuous Testing"),(0,s.kt)("pre",{align:"center"},"A comprehensive guide to developing a continuous testing plan, implementation, and automation approach for your project using AI tools."),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("h3",{id:"background"},"Background"),(0,s.kt)("p",null,"Continuous testing (CT) is the practice of automatically and continuously testing code changes throughout the development process to identify and address issues ",(0,s.kt)("em",{parentName:"p"},"early"),". The scope of continuous testing tests can include testing code modules, interaction between software components, security, user interfaces, etc. Implementing continuous testing is often difficult and time-consuming - we therefore recommend a simplified approach to getting started with CT through a templates and by using artificial intelligence tools like large-language models to quickly make a test plan a reality. The goal is to enable your project to identify and fix problems early, before they become major issues, leading to faster releases, improved software quality, and happier users."),(0,s.kt)("h3",{id:"approach"},"Approach"),(0,s.kt)("p",null,"Our recommendation is to follow a 4-step plan for continuous testing: (1) document your test approach, (2) write your tests, (3) automate your tests, and (4) maintain your tests."),(0,s.kt)("p",null,"The below diagram illustrates the 4-step approach."),(0,s.kt)("mermaid",{value:"graph TD\n    TestPlan[Write/edit a TESTING.md plan] --\x3e Implement[Write/edit your tests] --\x3e Automate[Automate/schedule tests]\n    Automate --\x3e Iterate[Change Code]\n    Iterate --\x3e Implement"}),(0,s.kt)("h3",{id:"use-cases"},"Use Cases"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Using artificial intelligence tools like large-language models (LLMs) to speed up test writing"),(0,s.kt)("li",{parentName:"ul"},"Establishing a continuous testing plan that coordinates your testing goals"),(0,s.kt)("li",{parentName:"ul"},"Automating as many of your tests as possible to run automatically"),(0,s.kt)("li",{parentName:"ul"},"Providing frequent test results and feedback for development teams"),(0,s.kt)("li",{parentName:"ul"},"Facilitating quicker releases"),(0,s.kt)("li",{parentName:"ul"},"Fostering a culture of continuous improvement in software development")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"quick-start"},"Quick Start"),(0,s.kt)("p",null,"Although there are many steps in setting up a continuous testing architecture, the most important step is to document a shared plan of approach for your team. "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"If you already have continuous testing enabled for your project"),": we recommend documenting your plan for internal and external team members' benefit within a ",(0,s.kt)("inlineCode",{parentName:"li"},"TESTING.md"),". This will help you communicate your testing architecture so that team members can contribute easily to improve code through additional tests and automation. Copy/paste our below template, fill it with your testing setup. Further steps are detailed in the (#step-by-step) guide section, which we encourage you to also follow to make test writing and automation more efficient.  "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"If you are brand new to continuous testing"),": we recommend starting with our (#step-by-step) guide to set up an efficient continuous testing plan for your project. ")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"TESTING"},"\u2b07\ufe0f Download our TESTING.md Template"))," (see ",(0,s.kt)("a",{parentName:"p",href:"TESTING-example"},"example")," of template in action)"),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"step-by-step-guide"},"Step-by-Step Guide"),(0,s.kt)("p",null,"This step-by-step guide walks you through establishing, writing, automating, and maintaining a continuous testing solution for your project."),(0,s.kt)("h3",{id:"1-create-a-testingmd"},"1. Create a TESTING.md"),(0,s.kt)("p",null,"We recommend creating a ",(0,s.kt)("inlineCode",{parentName:"p"},"TESTING.md")," file that spells out the testing objectives and plans for your software in an easy-to-view location.  "),(0,s.kt)("p",null,"This file will provide your development team (and other potential contributors) with:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"A list of the types of tests you run against your software"),(0,s.kt)("li",{parentName:"ol"},"Locations where your tests are defined"),(0,s.kt)("li",{parentName:"ol"},"When and how your tests are run")),(0,s.kt)("p",null,"The benefit of having the above in a single file is to help guide your testing journey as well as to add clarity for your development team on where and how your tests are written and run. "),(0,s.kt)("p",null,"To get you started, download our template to get started and place it at the root of your repository."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"TESTING"},"\u2b07\ufe0f Download our TESTING.md Template"))," (see ",(0,s.kt)("a",{parentName:"p",href:"TESTING-example"},"example")," of template in action)"),(0,s.kt)("h4",{id:"11-types-of-testing"},"1.1 Types of Testing"),(0,s.kt)("p",null,'Scroll to the "Types of Testing" section within your ',(0,s.kt)("inlineCode",{parentName:"p"},"TESTING.md")," and begin checking off the types of testing your project intends to (or already does) implement from the provided list. Each type of testing serves a different purpose:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Unit Tests check the smallest parts of an application, like functions or methods."),(0,s.kt)("li",{parentName:"ul"},"System Tests help ensure different parts of your application work together as well as verify the final released application product meets expected standards like security constraints, performance needs, user interface needs, etc.")),(0,s.kt)("h4",{id:"12-unit-testing"},"1.2 Unit Testing"),(0,s.kt)("p",null,"In this section you'll want to explain how unit tests are structured within your project, including where they are stored (e.g., /tests/unit), and how frequently they are run. Mention the unit testing framework you're using (e.g., Jest, NUnit), and provide guidelines or a link to best practices for writing unit tests. This section is important for ensuring that new contributors understand how to write and run unit tests in your project."),(0,s.kt)("p",null,"Include specifics about your testing setup in this template section as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT PATH TO UNIT TEST FOLDER ON REVISION CONTROL]"),": Specify the location of your unit tests, such as /tests/unit."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS]"),': Describe what initiates the unit tests, such as "upon every commit", "pull request creation", or "nightly builds".'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT YOUR UNIT TESTING FRAMEWORK OF CHOICE]"),': Mention the framework used for unit testing, e.g., "Jest for JavaScript", "JUnit for Java", and provide a link to the framework\'s documentation or getting started guide. Consult our ',(0,s.kt)("a",{parentName:"li",href:"testing-frameworks"},"Testing Frameworks")," guide for recommended frameworks to choose from. See ",(0,s.kt)("a",{parentName:"li",href:"#2-write-your-tests"},"Write Your Tests")," for more details. ")),(0,s.kt)("h4",{id:"13-system-tests"},"1.3 System Tests"),(0,s.kt)("p",null,"System Tests help verify your final application meets end-user needs in a finalized form. There are a couple of recommendations we have for performing system tests."),(0,s.kt)("h5",{id:"integration-tests"},"Integration Tests"),(0,s.kt)("p",null,"In this section, we suggest you outline the process for integration testing, including the tools and frameworks used (e.g., Cypress, Postman). Specify where integration tests are located within the project repository and the trigger for these tests (e.g., merge requests, scheduled nightly builds). Integration testing ensures that combined parts of your application function together as expected, as well as interact with your users (other programs or people)."),(0,s.kt)("p",null,"Include specifics about your testing setup in this template section as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT PATH TO INTEGRATION TEST FOLDER ON REVISION CONTROL]"),": Indicate where integration tests are stored within your repository, for example, /tests/system/integration."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT YOUR INTEGRATION TESTING FRAMEWORK OF CHOICE]"),': Recommend the integration testing tool or framework, such as "Cypress for end-to-end tests", "Postman for API testing", and include a reference link. Consult our ',(0,s.kt)("a",{parentName:"li",href:"testing-frameworks"},"Testing Frameworks")," guide for recommended frameworks to choose from.")),(0,s.kt)("h5",{id:"security-tests"},"Security Tests"),(0,s.kt)("p",null,"Security testing is important for identifying vulnerabilities in your application early. In this section, recommend tools and frameworks for security testing, such as OWASP ZAP for dynamic analysis or GitHub.com Dependabot for dependency scanning. Explain how and when security tests are run, and provide guidance on adhering to security best practices, such as avoiding OWASP Top 10 Vulnerabilities - which can ensure your development team is aware of how to design for minimum vulnerability risks. "),(0,s.kt)("p",null,"Include specifics about your testing setup in this template section as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT NAME AND LINK TO SECURITY FRAMEWORK]"),': Suggest security testing tools or services, for instance, "OWASP ZAP for web applications", "GitHub.com Dependabot for dependency scanning", and provide their official documentation or homepage links. Consult our ',(0,s.kt)("a",{parentName:"li",href:"testing-frameworks"},"Testing Frameworks")," guide for recommended frameworks to choose from."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS]"),': Define when security tests are performed, like "before merging to the main branch", "weekly automated scans".')),(0,s.kt)("h5",{id:"performance-tests"},"Performance Tests"),(0,s.kt)("p",null,"In this section, discuss the importance of performance testing and recommend tools (e.g., Apache JMeter, Chaos Monkey for simulating failures). Describe where performance tests are located, what triggers them (e.g., before release candidates, monthly), and the goals (e.g., handling 2X expected user load). Performance testing ensures your application can handle expected and peak loads."),(0,s.kt)("p",null,"Include specifics about your testing setup in this template section as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT PATH TO PERFORMANCE TEST FOLDER ON REVISION CONTROL]"),": Specify the directory for performance tests, such as /tests/system/performance."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT YOUR INTEGRATION TESTING FRAMEWORK OF CHOICE]"),': Indicate the performance testing tool or framework, plus an additional tool for simulating failures, e.g., "Apache JMeter for load testing", "Chaos Monkey for resilience testing", along with links to their guides or documentation. Consult our ',(0,s.kt)("a",{parentName:"li",href:"testing-frameworks"},"Testing Frameworks")," guide for recommended frameworks to choose from.")),(0,s.kt)("h5",{id:"user-interface-ui-tests"},"User Interface (UI) Tests"),(0,s.kt)("p",null,"In this section, you'll detail the UI testing process, including how these tests ensure compliance with user interaction needs. Mention the framework used for UI testing (e.g., Selenium). Provide information on the location of UI tests within the project repository and the testing schedule."),(0,s.kt)("p",null,"Include specifics about your testing setup in this template section as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT PATH TO UI TEST FOLDER ON REVISION CONTROL]"),": Direct where UI tests can be found in your project, for instance, /tests/system/ui."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[INSERT YOUR INTEGRATION TESTING FRAMEWORK OF CHOICE]"),': Mention the framework or tool used for V&V testing, such as "TestRail for test management", and provide a link to how to use it within your project. Consult our ',(0,s.kt)("a",{parentName:"li",href:"testing-frameworks"},"Testing Frameworks")," guide for recommended frameworks to choose from.")),(0,s.kt)("h3",{id:"2-write-your-tests"},"2. Write Your Tests"),(0,s.kt)("p",null,"Writing comprehensive tests for large software applications can be a time-consuming process. While automatic test code generation tools like Pynguin show promise, they may not yet meet practical needs. Recent studies suggest that Large Language Models (LLMs) offer a viable solution, covering up to 85% of test methods automatically (source: ",(0,s.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2305.00418.pdf"},"study"),")."),(0,s.kt)("p",null,"Our recommendation is to leverage LLM-based tools, such as llama2, to quickly generate initial test code, with developers refining and expanding as necessary. Here's how:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Download and Install OLLAMA:")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/ollama/ollama"},"OLLAMA"),": A streamlined tool for running LLMs locally."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Invoke LLM and Generate Test Code:")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'ollama run llama2 "$(cat ~/app_pack_generator/docker.py)" write a unit test code\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Review and Refine Generated Code:")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Developers should review the generated code, fixing errors and adding any missing edge cases."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Iterate as Needed:")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If necessary, update the prompt and obtain a revised test code. Repeat the process until satisfactory.")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Disclaimer:")," While LLMs can generate approximately 80% of test code automatically, developers must verify and refine the remaining 20%, ensuring comprehensive test coverage."),(0,s.kt)("h4",{id:"21-recommended-test-types"},"2.1 Recommended Test Types"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Unit Tests:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Automatically generated to cover basic functionality and common scenarios. (",(0,s.kt)("a",{parentName:"li",href:"TESTING#L26"},"Unit Tests in TESTING.md Template"),")"),(0,s.kt)("li",{parentName:"ul"},"Recommended Prompts for Auto-generated Unit Tests: ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Basic Functionality Testing:"),'\n"Generate unit tests for a function/method that performs basic arithmetic operations (addition, subtraction, multiplication, division)."'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Handling Edge Cases:"),'\n"Create tests for a function that handles edge cases, such as zero division, boundary values, and unexpected input types."'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"String Manipulation:"),'\n"Generate unit tests for a function that involves string manipulation, including tests for string concatenation, slicing, and length calculations."'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"List/Array Operations:"),'\n"Create tests for functions that operate on lists/arrays, covering scenarios like element addition, removal, and list comprehensions."'),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Exception Handling:"),'\n"Generate unit tests to ensure proper exception handling in functions that may encounter errors. Include tests for both expected and unexpected exceptions."'))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"System Tests:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Integration Tests:")," Verify interactions between components. (",(0,s.kt)("a",{parentName:"li",href:"TESTING#L62"},"Integration Tests in TESTING.md Template"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Performance Tests:")," Assess system responsiveness and scalability. (",(0,s.kt)("a",{parentName:"li",href:"TESTING#L114"},"Performance Tests in TESTING.md Template"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Security Tests:")," Check for vulnerabilities and adherence to security protocols. (",(0,s.kt)("a",{parentName:"li",href:"TESTING#L88"},"Security Tests in TESTING.md Template"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"User Interface Tests:")," Ensure intuitive and error-free user experiences. (",(0,s.kt)("a",{parentName:"li",href:"TESTING#L143"},"User Interface Tests in TESTING.md Template"),")")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example Generated Unit Test:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import unittest\n\nclass TestCalculator(unittest.TestCase):\n    def test_addition(self):\n        # Test addition functionality\n        self.assertEqual(calculator.add(2, 3), 5)\n\n    def test_subtraction(self):\n        # Test subtraction functionality\n        self.assertEqual(calculator.subtract(5, 3), 2)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example Generated Integration Test:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import unittest\n\nclass TestDatabaseIntegration(unittest.TestCase):\n    def test_database_connection(self):\n        # Test database connection\n        self.assertTrue(database.is_connected())\n\n    def test_data_insertion(self):\n        # Test data insertion into the database\n        self.assertTrue(database.insert_data(data))\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example Generated Performance Test:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import unittest\nimport time\n\nclass TestPerformance(unittest.TestCase):\n    def setUp(self):\n        # Setup any necessary resources or configurations\n        pass\n\n    def tearDown(self):\n        # Clean up resources after each test\n        pass\n\n    def test_performance_operation(self):\n        # Measure the performance of a specific operation\n        start_time = time.time()\n\n        # Perform the operation (e.g., sorting a large list)\n        data = list(range(1000000))\n        sorted_data = sorted(data)\n\n        # Calculate the execution time\n        execution_time = time.time() - start_time\n\n        # Define a threshold for acceptable performance\n        threshold = 1.0  # 1 second\n\n        # Assert that the execution time is within the acceptable threshold\n        self.assertLessEqual(execution_time, threshold)\n\nif __name__ == '__main__':\n    unittest.main()\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example Generated Security Test:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import unittest\n\nclass TestSecurity(unittest.TestCase):\n    def setUp(self):\n        # Setup any necessary resources or configurations\n        pass\n\n    def tearDown(self):\n        # Clean up resources after each test\n        pass\n\n    def test_secure_authentication(self):\n        # Simulate a secure authentication process\n        username = "admin"\n        password = "password123"\n\n        # Check if password meets security requirements\n        # For example, minimum length and presence of special characters\n        self.assertTrue(len(password) >= 8)\n        self.assertTrue(any(char.isdigit() for char in password))\n        self.assertTrue(any(char.isupper() for char in password))\n        self.assertTrue(any(char.islower() for char in password))\n        self.assertTrue(any(char in "!@#$%^&*()-_=+[]" for char in password))\n\n        # Check if username is not easily guessable\n        common_usernames = ["admin", "root", "user", "test"]\n        self.assertNotIn(username, common_usernames)\n\n    def test_data_encryption(self):\n        # Simulate data encryption process\n        plaintext_data = "Sensitive information"\n        encrypted_data = encrypt(plaintext_data)\n\n        # Check if the encryption process is secure\n        self.assertNotEqual(plaintext_data, encrypted_data)\n\n    def test_permission_checks(self):\n        # Simulate permission checks for sensitive operations\n        user_role = "admin"\n        operation = "delete_user_data"\n\n        # Check if the user role has permission for the operation\n        self.assertTrue(check_permission(user_role, operation))\n\nif __name__ == \'__main__\':\n    unittest.main()\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example Generated UI Test:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import unittest\n\nclass TestUserInterface(unittest.TestCase):\n    def setUp(self):\n        # Set up the UI testing environment\n        self.app = create_test_app()  # Function to create a test instance of the application\n        self.client = self.app.test_client()  # Client for interacting with the application\n\n    def tearDown(self):\n        # Clean up after each test\n        pass\n\n    def test_login_page(self):\n        # Test the login page UI elements and functionality\n        response = self.client.get('/login')\n        self.assertEqual(response.status_code, 200)  # Check if the page loads successfully\n        self.assertIn(b'Login', response.data)  # Check if the login form is present\n        self.assertIn(b'Username:', response.data)  # Check if username input field is present\n        self.assertIn(b'Password:', response.data)  # Check if password input field is present\n        self.assertIn(b'Submit', response.data)  # Check if submit button is present\n\n    def test_registration_page(self):\n        # Test the registration page UI elements and functionality\n        response = self.client.get('/register')\n        self.assertEqual(response.status_code, 200)  # Check if the page loads successfully\n        self.assertIn(b'Register', response.data)  # Check if the registration form is present\n        self.assertIn(b'Username:', response.data)  # Check if username input field is present\n        self.assertIn(b'Email:', response.data)  # Check if email input field is present\n        self.assertIn(b'Password:', response.data)  # Check if password input field is present\n        self.assertIn(b'Confirm Password:', response.data)  # Check if confirm password input field is present\n        self.assertIn(b'Register', response.data)  # Check if register button is present\n\n    def test_dashboard_page(self):\n        # Test the dashboard page UI elements and functionality\n        response = self.client.get('/dashboard')\n        self.assertEqual(response.status_code, 200)  # Check if the page loads successfully\n        self.assertIn(b'Dashboard', response.data)  # Check if the dashboard content is present\n        self.assertIn(b'Welcome', response.data)  # Check if the user welcome message is present\n        self.assertIn(b'Logout', response.data)  # Check if the logout link is present\n\nif __name__ == '__main__':\n    unittest.main()\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," These are simplified examples; actual test cases may vary depending on the application's complexity and requirements."),(0,s.kt)("h4",{id:"22-robot-framework-and-llm-synergy"},"2.2 Robot Framework and LLM Synergy"),(0,s.kt)("p",null,"In scenarios where you are already well-versed in ",(0,s.kt)("strong",{parentName:"p"},"Robot Framework"),", leveraging the synergy between Robot Framework and ",(0,s.kt)("strong",{parentName:"p"},"LLM (Llama2)")," can yield significant benefits. Specifically, using LLM to auto-generate Robot Framework pseudocode streamlines the process of creating integration test cases. Here's an example:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Generating Robot Framework Pseudocode with LLM"),":"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Use Llama2 to generate test case pseudocode in Robot Framework syntax.",(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-robot"},"*** Settings ***\nDocumentation    Example test suite\nLibrary          SeleniumLibrary\n*** Test Cases ***\nValid Login\n    Open Browser    https://dummy-website.com    chrome\n    Input Text      username_field    valid_username\n    Input Text      password_field    valid_password\n    Click Button    login_button\n    Page Should Contain    Welcome, User!\n\nInvalid Login\n    Open Browser    https://dummy-website.com    chrome\n    Input Text      username_field    invalid_username\n    Input Text      password_field    invalid_password\n    Click Button    login_button\n    Page Should Contain    Invalid credentials\n"))))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Direct Revision and Enhancement"),":"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Revise the Robot Framework pseudocode as needed:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Add additional steps."),(0,s.kt)("li",{parentName:"ul"},"Include assertions for edge cases."),(0,s.kt)("li",{parentName:"ul"},"Incorporate custom keywords or libraries."))))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Test Execution"),":"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Run the tests locally or integrate them into your CI pipeline.")))),(0,s.kt)("p",null,"By combining LLM's natural language capabilities with Robot Framework's structured format, you can efficiently create and adapt  test cases."),(0,s.kt)("h5",{id:"221-example---robot-framework-and-llm-synergy"},"2.2.1 Example - Robot Framework and LLM Synergy"),(0,s.kt)("p",null,"Generate a Robot Framework script for MFA login with the following steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Navigate to the login page."),(0,s.kt)("li",{parentName:"ol"},"Fill in the username and password."),(0,s.kt)("li",{parentName:"ol"},"Generate a TOTP (Time-Based One-Time Password)."),(0,s.kt)("li",{parentName:"ol"},"Fill in the TOTP code field."),(0,s.kt)("li",{parentName:"ol"},'Click the "Sign in" button.'),(0,s.kt)("li",{parentName:"ol"},"Verify that the login was successful.")),(0,s.kt)("p",null,"Here's a simple prompt to generate the script:"),(0,s.kt)("p",null,"\"Generate a Robot Framework script to perform MFA (Multi-Factor Authentication) login. The script should navigate to the login page, fill in the username and password fields, generate a TOTP code using the provided secret, enter the TOTP code, click the 'Sign in' button, and verify that the login was successful by checking the welcome message.\""),(0,s.kt)("p",null,"Here's the LLM output Robot Framework script:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-robot"},"*** Settings ***\nLibrary    Browser\nLibrary    totp.py\nSuite Setup    New Browser    browser=${BROWSER}    headless=${HEADLESS}\nTest Setup    New Context\nTest Teardown    Close Context\nSuite Teardown    Close Browser\n\n*** Variables ***\n${BROWSER}    chromium\n${HEADLESS}    False\n\n*** Test Cases ***\nMFA Login Test\n    Open Browser    https://example.com/login    ${BROWSER}\n    Input Text    id=username    your_username\n    Input Text    id=password    your_password\n    ${totp}    Generate TOTP    your_totp_secret\n    Input Text    id=totpcode    ${totp}\n    Click Button    id=signin_button\n    Wait Until Page Contains Element    xpath=//h1[text()='Welcome!']\n")),(0,s.kt)("p",null,"Here's the test output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"% robot --pythonpath . tests\n==============================================================================\nTests                                                                         \n==============================================================================\nTests.Mfa Login                                                               \n==============================================================================\nLogin with MFA                                                        | PASS |\n------------------------------------------------------------------------------\nTests.Mfa Login                                                       | PASS |\n1 test, 1 passed, 0 failed\n==============================================================================\nTests                                                                 | PASS |\n1 test, 1 passed, 0 failed\n==============================================================================\nOutput:  MFA_Login/output.xml\nLog:     MFA_Login/log.html\nReport:  MFA_Login/report.html\n")),(0,s.kt)("h3",{id:"3-automate-your-tests"},"3. Automate Your Tests"),(0,s.kt)("p",null,"Our recommendation is to automate as many of your tests as possible. For tests that can't be automated, we suggest scheduling specific times for personnel to run manual tests."),(0,s.kt)("h4",{id:"31-unit-test-automation"},"3.1 Unit Test Automation"),(0,s.kt)("p",null,"Please consult our ",(0,s.kt)("a",{parentName:"p",href:"testing-frameworks"},"Testing Frameworks guide")," for a choice of unit testing tools we recommend. Once selected, we recommend automating the execution of your unit tests in both of the following ways:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Execute unit tests locally on your developers' machines upon local Git commits"),(0,s.kt)("li",{parentName:"ol"},"Execute unit tests upon Git pushes to given Git branches on your version control system (VCS) - hosted on GitHub.com or alternate")),(0,s.kt)("p",null,"This idea is represented in the following diagram:"),(0,s.kt)("mermaid",{value:"graph TD\n    subgraph Developers' Machines\n        A[Local Git Commit] --\x3e|Run Unit Tests| B{Tests Passed?}\n        B --\x3e|Yes| C[Locally Committed]\n        B --\x3e|No| D[Fix Code]\n    end\n\n    subgraph VCS[Version Control System e.g. GitHub]\n        E[Git Push to Specific Branch] --\x3e|Run Unit Tests| F{Tests Passed?}\n        F --\x3e|Yes| G[Accept Pull Request]\n        F --\x3e|No| H[Review Code Changes]\n    end"}),(0,s.kt)("p",null,"To make the above automation a reality, we recommend using ",(0,s.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"pre-commit"),", a framework that manages and maintains multi-language pre-commit hooks that can be used on the client side as well as the server (VCS) side. Here's how to set it up:"),(0,s.kt)("h5",{id:"developers-machines"},"Developers' Machines"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Step 1:")," Install ",(0,s.kt)("inlineCode",{parentName:"p"},"pre-commit")," on your local machine. If you are using Python, you can install it via pip:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pre-commit\n\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Step 2:")," Create a .pre-commit-config.yaml file at the root of your repository with the configuration for your Python unit tests using PyTest. Here's an example template you can start with:"),(0,s.kt)("p",{parentName:"li"}," ",(0,s.kt)("strong",{parentName:"p"},"Python")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"repos:\n- repo: local\n   hooks:\n      - id: pytest\n         name: PyTest\n         entry: pytest\n         language: system\n         files: '\\.py$'\n         stages: [commit]\n")),(0,s.kt)("p",{parentName:"li"},"This configuration assumes that you have PyTest installed and set up for your project. The files regex \\ .py$ ensures that the pre-commit hook only runs on Python files."),(0,s.kt)("p",{parentName:"li"}," ",(0,s.kt)("strong",{parentName:"p"},"HCL (HashiCorp Configuration Language)")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"repos:\n- repo: local\nhooks:\n   - id: terraform_fmt\n     name: Terraform Format\n     entry: terraform fmt -check\n     language: system\n     files: '\\.tf$'\n     stages: [commit]\n")),(0,s.kt)("p",{parentName:"li"}," This configuration uses Terraform's built-in fmt command to format Terraform configuration files. While not a direct unit test, it's a common practice to ensure code quality and consistency in HCL-based projects."),(0,s.kt)("p",{parentName:"li"}," ",(0,s.kt)("strong",{parentName:"p"},"JavaScript")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"repos:\n- repo: local\nhooks:\n   - id: jest\n     name: Jest\n     entry: npm run test\n     language: system\n     files: '\\.(js|jsx)$'\n     stages: [commit]\n")),(0,s.kt)("p",{parentName:"li"}," This setup assumes you are using Jest for testing your JavaScript projects. The npm run test command should be configured in your package.json to execute Jest tests. If using TypeScript, replace the line ",(0,s.kt)("inlineCode",{parentName:"p"},"files: '\\.(js|jsx)$'")," with ",(0,s.kt)("inlineCode",{parentName:"p"},"files: '\\.(ts|tsx)$'"),"."),(0,s.kt)("p",{parentName:"li"}," ",(0,s.kt)("strong",{parentName:"p"},"Jupyter Notebook")),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"repos:\n- repo: local\nhooks:\n   - id: nbtest\n     name: Notebook Test\n     entry: jupyter nbconvert --to notebook --execute --inplace\n     language: system\n     files: '\\.ipynb$'\n     stages: [commit]\n")),(0,s.kt)("p",{parentName:"li"}," This configuration uses Jupyter's nbconvert tool to execute notebooks as a form of testing. It's a basic approach to running tests in Jupyter Notebooks and might need additional tooling or scripts for more comprehensive testing scenarios.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Step 3:")," Install the pre-commit hook into your Git repository:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"pre-commit install\n")),(0,s.kt)("p",{parentName:"li"}," Now, every time you commit changes, your unit tests will run automatically on the specified (pattern-matching) files you've staged for commit."))),(0,s.kt)("h5",{id:"version-control-system"},"Version Control System"),(0,s.kt)("p",null,"For automated execution of unit tests upon Git pushes using a VCS, we recommend using GitHub Actions or a configuration for Jenkins:"),(0,s.kt)("p",null,"To invoke a ",(0,s.kt)("inlineCode",{parentName:"p"},".pre-commit-config.yml")," configuration from GitHub Actions or Jenkins for automated execution of unit tests upon Git pushes, follow these detailed directions:"),(0,s.kt)("h6",{id:"github-actions"},"GitHub Actions"),(0,s.kt)("p",null,"To execute the pre-commit hooks defined in your ",(0,s.kt)("inlineCode",{parentName:"p"},".pre-commit-config.yml")," as part of a GitHub Actions workflow, you will create a workflow file in your repository that triggers on push events. Here\u2019s how to set it up:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Create a Workflow File:")," Navigate to the ",(0,s.kt)("inlineCode",{parentName:"p"},".github/workflows")," directory in your repository. If it doesn't exist, create it.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Define the Workflow:")," Create a new file named ",(0,s.kt)("inlineCode",{parentName:"p"},"pre-commit-action.yml")," (or another name of your choosing) in the workflows directory. Add the following content to this file:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Pre-commit Hooks\n\non: [push]\n\njobs:\n  run-hooks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Install pre-commit\n        run: pip install pre-commit\n      - name: Run pre-commit hooks\n        run: pre-commit run --all-files\n")))),(0,s.kt)("p",null,"This workflow checks out the code, sets up Python, installs pre-commit, and then runs all the pre-commit hooks defined in .pre-commit-config.yml against all files in the repository. Adjust the python-version and setup steps according to your project's needs."),(0,s.kt)("p",null,"Commit and Push: Commit the workflow file to your repository and push it to GitHub. The workflow will automatically trigger on the next push to your repository."),(0,s.kt)("h6",{id:"jenkins"},"Jenkins"),(0,s.kt)("p",null,"To run the pre-commit hooks as part of a Jenkins build, you'll need to configure a Jenkins job that checks out your repository and executes the pre-commit hooks. Here's how to do it:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Install Pre-commit on Jenkins:")," Ensure that pre-commit and any language-specific runtime (like Python, Node.js) are installed on your Jenkins server or within the build environment that will run your job.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Create a New Jenkins Job:"),' In Jenkins, create a new job by selecting "New Item," then choose "Freestyle project," and give it a name.')),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Configure Source Code Management:"),' Under the "Source Code Management" tab, select "Git" and fill in the repository URL and credentials if necessary.')),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Add Build Step to Execute Shell:"),' In the "Build" section, add a build step that executes shell commands. Add the following commands:'),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre"},"#!/bin/bash\n# Install pre-commit if not already installed; optional based on your setup\npip install pre-commit\n\n# Run pre-commit hooks\npre-commit run --all-files\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Save and Run the Job:")," After configuring the job, save it and run it manually to verify that the pre-commit hooks are executed as expected.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Triggering the Job:")," You can configure the job to be triggered on each push to your repository by using Jenkins webhooks or polling SCM, depending on your preference and setup."))),(0,s.kt)("h4",{id:"32-system-test-automation"},"3.2 System Test Automation"),(0,s.kt)("p",null,"To aid in the automation of system tests, we suggest doing the following:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Have a schedule for running system tests (e.g. nightly, weekly)"),(0,s.kt)("li",{parentName:"ol"},"Ensure software is built and published to repositories:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Stand-alone components of your software should be independently released, built, or packaged to be published on public repositories"),(0,s.kt)("li",{parentName:"ul"},"(Optional) a final, single build of an integrated software consisting of multiple components is built, packaged, and published to a public repository"))),(0,s.kt)("li",{parentName:"ol"},"Pull built or packaged artifacts from repositories and deploy software release (components or single package) to a virtualized environment"),(0,s.kt)("li",{parentName:"ol"},"Test the deployed release against a set of specified system tests")),(0,s.kt)("p",null,"The diagram below illustrates this concept:"),(0,s.kt)("mermaid",{value:"graph TD\n    subgraph SoftwareDevelopment[Software Components]\n        Code[Code Development]\n        UnitTests{Unit Tests Success?}\n        BuildComponents[Build Stand-alone Components]\n        PublishArtifacts[(Publish Artifacts to Repositories)]\n    end\n    subgraph IntegratedSoftware[Integrated Software]\n        SingleIntegratedBuild{Single Integrated Build?}\n        BuildIntegratedSoftware[Build Integrated Software]\n        PublishIntegratedArtifact[(Publish Integrated Artifact to Repository)]\n    end\n\n    subgraph TestDeployment[Testing & Deployment, e.g. nightly / weekly]\n        PullArtifacts[Pull Artifacts]\n        DeployRelease[Deploy Software Release]\n        IntegrationTests[Test Against System Tests]\n    end\n\n    Code --\x3e UnitTests\n    UnitTests --\x3e|Yes| BuildComponents\n    UnitTests --\x3e|No| Code\n    BuildComponents --\x3e PublishArtifacts\n    SingleIntegratedBuild --\x3e|Yes| BuildIntegratedSoftware\n    PublishArtifacts --\x3e BuildIntegratedSoftware\n    BuildIntegratedSoftware --\x3e PublishIntegratedArtifact\n    PullArtifacts --\x3e DeployRelease\n    DeployRelease --\x3e IntegrationTests\n    PublishArtifacts --\x3e TestDeployment\n    PublishIntegratedArtifact --\x3e TestDeployment"}),(0,s.kt)("h5",{id:"types-of-system-tests"},"Types of System Tests"),(0,s.kt)("p",null,"You should outline the types of system tests you plan to implement in your ",(0,s.kt)("inlineCode",{parentName:"p"},"TESTING.md")," file. We suggest the following types of tests to include:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Testing for integration",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Interaction between software components"),(0,s.kt)("li",{parentName:"ul"},"Interaction with external services, provided files, exchange of messages, etc."))),(0,s.kt)("li",{parentName:"ul"},"Testing for security",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"See existing ",(0,s.kt)("a",{parentName:"li",href:"/slim/docs/category/security"},"SLIM security best practices")," as part of your software development workflow."))),(0,s.kt)("li",{parentName:"ul"},"Testing for performance and load"),(0,s.kt)("li",{parentName:"ul"},"Testing user interfaces for gaps and compliance against policies")),(0,s.kt)("h5",{id:"integration-tests-automation"},"Integration Tests Automation"),(0,s.kt)("p",null,"TBD - automation to help script tests"),(0,s.kt)("h5",{id:"security-tests-automation"},"Security Tests Automation"),(0,s.kt)("p",null,"To aid in security testing automation, we recommend two steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Add security testing to your developers' local coding environment via pre-commit (see ",(0,s.kt)("a",{parentName:"li",href:"#31-unit-test-automation"},"Unit Test Automation")," section above)"),(0,s.kt)("li",{parentName:"ol"},"Enable existing ",(0,s.kt)("a",{parentName:"li",href:"/slim/docs/category/security"},"SLIM security best practices")," as part of your software development workflow.")),(0,s.kt)("h5",{id:"performance-tests-automation"},"Performance Tests Automation"),(0,s.kt)("p",null,"TBD - automation to help script tests"),(0,s.kt)("h5",{id:"user-interface-tests-automation"},"User Interface Tests Automation"),(0,s.kt)("p",null,"TBD - automation to help script tests"),(0,s.kt)("h3",{id:"4-maintain-your-tests"},"4. Maintain Your Tests"),(0,s.kt)("p",null,"TBD - automation to help ensure test architecture is adhered to and updated when needed "),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"frequently-asked-questions-faq"},"Frequently Asked Questions (FAQ)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Q: How does continuous testing address usability and user interface testing?")),(0,s.kt)("p",null,"A: We acknowledge the importance of usability and UI testing and are actively exploring ways to integrate them seamlessly into our continuous testing model."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Q: Is it necessary to implement all recommended tools, considering resource constraints?")),(0,s.kt)("p",null,"A: We understand the challenges, and thus, we're developing a common subset of tools for all projects, prioritizing their importance for more feasible implementation."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Q: Are certain projects not mature enough for specific tools?")),(0,s.kt)("p",null,"A: Yes, we recognize project maturity levels vary. We recommend waiting until your project reaches an appropriate stage, especially for tools like integration testing."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Q: What phases are prioritized in the continuous testing guidelines?")),(0,s.kt)("p",null,"A: Security, verification and validation, and integration testing are considered essential phases and will be prioritized in our guidelines."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Q: How does licensing factor into the tool selection process, even for open-source tools?")),(0,s.kt)("p",null,"A: Licensing is crucial, and we are actively exploring strategies to address licensing concerns, ensuring compliance even with open-source tools."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Q: Is continuous testing a one-time implementation, or can it be an iterative process?")),(0,s.kt)("p",null,"A: We emphasize iterative implementation for continuous testing success, understanding that refining the process takes time."),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"credits"},"Credits"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Authorship"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/yunks128"},"Kyongsik Yun")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/riverma"},"Rishi Verma"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Acknowledgements"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Thank you to John Engelke and Dillon Dalton for insightful comments and feedback, which contributed to the enhancement of this work.")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"feedback-and-contributions"},"Feedback and Contributions"),(0,s.kt)("p",null,"We welcome feedback and contributions to help improve and grow this page. Please see our ",(0,s.kt)("a",{parentName:"p",href:"https://nasa-ammos.github.io/slim/docs/contribute/contributing/"},"contribution guidelines"),"."))}c.isMDXComponent=!0}}]);