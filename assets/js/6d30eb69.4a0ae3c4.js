"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4070],{3905:(e,n,t)=>{t.d(n,{Zo:()=>E,kt:()=>l});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function T(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var a=r.createContext({}),c=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},E=function(e){var n=c(e.components);return r.createElement(a.Provider,{value:n},e.children)},u="mdxType",O={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},I=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,E=T(e,["components","mdxType","originalType","parentName"]),u=c(t),I=s,l=u["".concat(a,".").concat(I)]||u[I]||O[I]||o;return t?r.createElement(l,i(i({ref:n},E),{},{components:t})):r.createElement(l,i({ref:n},E))}));function l(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,i=new Array(o);i[0]=I;var T={};for(var a in n)hasOwnProperty.call(n,a)&&(T[a]=n[a]);T.originalType=e,T[u]="string"==typeof e?e:s,i[1]=T;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}I.displayName="MDXCreateElement"},4729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>O,frontMatter:()=>o,metadata:()=>T,toc:()=>c});var r=t(7462),s=(t(7294),t(3905));const o={title:"TESTING.md (Template)",sidebar_label:"TESTING.md (Template)",position:1},i=void 0,T={unversionedId:"guides/software-lifecycle/continuous-testing/TESTING",id:"guides/software-lifecycle/continuous-testing/TESTING",title:"TESTING.md (Template)",description:"",source:"@site/docs/guides/software-lifecycle/continuous-testing/TESTING.md",sourceDirName:"guides/software-lifecycle/continuous-testing",slug:"/guides/software-lifecycle/continuous-testing/TESTING",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/TESTING",draft:!1,editUrl:"https://github.com/nasa-ammos/slim/tree/main/docs/guides/software-lifecycle/continuous-testing/TESTING.md",tags:[],version:"current",frontMatter:{title:"TESTING.md (Template)",sidebar_label:"TESTING.md (Template)",position:1},sidebar:"guidesSidebar",previous:{title:"TESTING.md (Example)",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/TESTING-example"},next:{title:"Testing Frameworks",permalink:"/slim/docs/guides/software-lifecycle/continuous-testing/testing-frameworks"}},a={},c=[],E={toc:c},u="wrapper";function O(e){let{components:n,...t}=e;return(0,s.kt)(u,(0,r.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-markdown"},"# [INSERT PROJECT NAME HERE] Testing\n\n## Introduction\nThis document provides an overview of the testing architecture for [INSERT PROJECT NAME HERE]. It encompasses continuous testing concepts such as testing across the software development lifecycle as well as automated execution of tests through automation. \n\n---\n\n## Types of Testing\n\nThe below list of tests are included in our testing setup. Further details are provided below.\n\n- [ ] Unit Tests\n- [ ] System Tests\n  - [ ] Integration Tests\n  - [ ] Security Tests\n  - [ ] Performance Tests\n  - [ ] User Interfaces Tests\n\n### Unit Tests\n\nOur unit tests ensure code is tested at a function, method, or sub-module level. \n\nView existing to add new tests to:\n\n**Location(s):**\n- [INSERT PATH TO UNIT TEST FOLDER ON REVISION CONTROL]\n- [INSERT PATH TO UNIT TEST FOLDER ON REVISION CONTROL]\n- ...\n\nView or modify the testing schedule per:\n\n**Testing Frequency:**\n- [INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS, E.G. CODE CHANGES, COMMITS, ETC.]\n- [INSERT TIMING OF WHEN YOUR TESTS KICK OFF, E.G. NIGHTLY, EVERY WEEK, ETC.]\n\n#### Contributing Unit Tests\n\nTo contribute unit tests, we recommend:\n- Leveraging the [INSERT YOUR UNIT TESTING FRAMEWORK OF CHOICE] framework\n  - [INSERT/LINK TO DIRECTIONS FOR USING UNIT TESTING FRAMEWORK]\n- Ensuring your unit tests:\n  - Test every non-trivial function or method in your code\n  - Test conditions including malformed arguments and null conditions\n  - [INSERT OTHER CONDITIONS YOU THINK ARE IMPORTANT]\n\n### System Tests\n\nOur system tests are intended to test the overall software application in an integrated form. System integration tests look for:\n- Smooth integration of software components\n- Security\n- Performance\n- Requirements\n- User Interface (UI) and User Experience (UX)\n\n#### Integration Tests\n\nOur integration tests ensure software interacts with its environment as well as other software well.\n\nView existing to add new tests to:\n\n**Location(s):**\n- [INSERT PATH TO INTEGRATION TEST FOLDER ON REVISION CONTROL]\n- [INSERT PATH TO INTEGRATION TEST FOLDER ON REVISION CONTROL]\n- ...\n\nView or modify the testing schedule per:\n\n**Testing Frequency:**\n- [INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS, E.G. CODE CHANGES, COMMITS, ETC.]\n- [INSERT TIMING OF WHEN YOUR TESTS KICK OFF, E.G. NIGHTLY, EVERY WEEK, ETC.]\n\n##### Contributing Integration Tests\n\nTo contribute integration tests, we recommend:\n- Leveraging the [INSERT YOUR INTEGRATION TESTING FRAMEWORK OF CHOICE] framework\n  - [INSERT/LINK TO DIRECTIONS FOR USING INTEGRATION TESTING FRAMEWORK]\n- Ensuring your integration tests:\n  - Integration (build) your software from components to a whole\n  - Test the interaction between software components\n\n#### Security Tests\n\nOur security tests ensure our software is the least vulnerable it can be to potential threats.\n\nWe leverage the following frameworks for security tests:\n\n**Security Testing Frameworks(s):**\n- [INSERT NAME AND LINK TO SECURITY FRAMEWORK]\n- [INSERT NAME AND LINK TO SECURITY FRAMEWORK]\n- ...\n\nView or modify the testing schedule per:\n\n**Testing Frequency:**\n- [INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS, E.G. CODE CHANGES, COMMITS, ETC.]\n- [INSERT TIMING OF WHEN YOUR TESTS KICK OFF, E.G. NIGHTLY, EVERY WEEK, ETC.]\n\n##### Adhering to Security Best Practices\n\nTo adhere to security best practices, we recommend:\n- Leveraging the [INSERT YOUR DEVELOPER-ORIENTED SECURITY TESTING FRAMEWORK OF CHOICE] framework\n  - [INSERT/LINK TO DIRECTIONS FOR USING SECURITY TESTING FRAMEWORK]\n- Ensuring your code follows security best practices by:\n  - Ensuring your code does not expose one of the Open Worldwide Application Security Project [(OWASP) Top 10 Vulnerabilities](https://owasp.org/www-project-top-ten/)\n  - Has the latest references to external dependencies and libraries\n\n#### Performance Tests\n\nOur performance tests ensure our software is robustly designed to scale and deal with expected surges in resource utilization.\n\nView existing to add new tests to:\n\n**Location(s):**\n- [INSERT PATH TO PERFORMANCE TEST FOLDER ON REVISION CONTROL]\n- [INSERT PATH TO PERFORMANCE TEST FOLDER ON REVISION CONTROL]\n- ...\n\nView or modify the testing schedule per:\n\n**Testing Frequency:**\n- [INSERT TRIGGER OF WHAT KICKS OFF YOUR TESTS, E.G. CODE CHANGES, COMMITS, ETC.]\n- [INSERT TIMING OF WHEN YOUR TESTS KICK OFF, E.G. EVERY WEEK, MONTHLY, ETC.]\n\n##### Contributing Performance Tests\n\nTo contribute performance tests, we recommend:\n- Leveraging the [INSERT YOUR PERFORMANCE TESTING FRAMEWORK OF CHOICE] framework\n  - [INSERT/LINK TO DIRECTIONS FOR USING PERFORMANCE TESTING FRAMEWORK]\n- Ensuring your performance tests:\n  - Scale to 2X of your expected user utilization or resource utilization of demand\n  - Test for failure conditions such as:\n     - Out of memory, disk errors\n     - Loss of underlying compute capacity errors (i.e. shutdown, reboots)\n     - Surges in user interaction requests or external automated requests\n\n#### User Interface (UI) Tests\n\nOur User Interface (UI) tests ensure our software adheres to users' needs.\n\nView existing to add new tests to:\n\n**Location(s):**\n- [INSERT PATH TO UI TEST FOLDER ON REVISION CONTROL]\n- [INSERT PATH TO UI TEST FOLDER ON REVISION CONTROL]\n- ...\n\nView or modify the testing schedule per:\n\n**Testing Frequency:**\n- [INSERT TIMING OF WHEN YOUR TESTS KICK OFF, E.G. QUARTERLY, UPON RELEASE CANDIDATES, ETC.]\n\n##### Contributing UI Tests\n\nTo contribute UI tests, we recommend:\n- Leveraging the [INSERT YOUR UI TESTING FRAMEWORK OF CHOICE] framework\n  - [INSERT/LINK TO DIRECTIONS FOR USING UI TESTING FRAMEWORK]\n- Ensuring your UI/UX tests:\n  - Test user interfaces such as command-lines, APIs, and graphical user interfaces (GUIs)\n  - Test compliance against user interface policies like [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/TR/WCAG21/)\n")))}O.isMDXComponent=!0}}]);